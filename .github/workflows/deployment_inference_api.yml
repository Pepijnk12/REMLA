name: Deploy the docker image and the trained model

on:
  push:
    tags: ["v[0-9]+.[0-9]+.[0-9]+"]

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Parse version info from tag
        run: |
          # GITHUB_REF is like refs/tags/v2.3.5, so strip the first 11 chars
          VERSION=${GITHUB_REF:11}
          MAJOR=`echo "$VERSION" | cut -d . -f 1`
          MINOR=`echo "$VERSION" | cut -d . -f 2`
          PATCH=`echo "$VERSION" | cut -d . -f 3`
          echo "version=$VERSION" >> $GITHUB_ENV
          echo "version_major=$MAJOR" >> $GITHUB_ENV
          echo "version_minor=$MINOR" >> $GITHUB_ENV
          echo "version_patch=$PATCH" >> $GITHUB_ENV
      - name: Login to registry
        run: echo "${{ github.token }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Set up Python 3.8
      uses: actions/setup-python@v3
      with:
       python-version: "3.8"
       - name: Install dependencies
       run: |
         python -m pip install --upgrade pip
         if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Retrieve DVC data
        id: build_model
        env:
          GDRIVE_CREDENTIALS_DATA: ${{ secrets.GDRIVE_CREDENTIALS_DATA }}
        run: |
          dvc remote modify gdrive-remote gdrive_use_service_account true
          dvc pull
          dvc repro

      - name: Build and push
        run: |
          IMG=ghcr.io/remla-inference-api
          docker build \
            -f docker/inference-api/Dockerfile \
            -t ${IMG}:latest \
            -t ${IMG}:${{ env.version_major }}-latest \
            -t ${IMG}:${{ env.version_major }}.${{ env.version_minor }}-latest \
            -t ${IMG}:${{ env.version }} \
            .
          docker push --all-tags $IMG
