# ======== Service for the model A (inference API) ========== #
apiVersion: apps/v1
kind: Deployment
metadata:
  name: stackoverflow-tag-pred-model-depl
  labels:
    app: stackoverflow-tag-pred-model
spec:
  replicas: 1
  selector:
    matchLabels:
      app: stackoverflow-tag-pred-model
  template:
    metadata:
      labels:
        app: stackoverflow-tag-pred-model
    spec:
      containers:
      - name: stackoverflow-tag-pred-model      
        image: ghcr.io/pepijnk12/remla:inference-api-latest
        ports:
        - containerPort: 8000
---
apiVersion: v1
kind: Service
metadata:
  name: stackoverflow-tag-pred-svc
spec:
  selector:
    app: stackoverflow-tag-pred-model
  ports:
    - port: 8000
      targetPort: 8000
---
# ======== Service for the model B (inference API) ========== #
apiVersion: apps/v1
kind: Deployment
metadata:
  name: stackoverflow-tag-pred-model-depl-b
  labels:
    app: stackoverflow-tag-pred-model-b
spec:
  replicas: 1
  selector:
    matchLabels:
      app: stackoverflow-tag-pred-model-b
  template:
    metadata:
      labels:
        app: stackoverflow-tag-pred-model-b
    spec:
      containers:
      - name: stackoverflow-tag-pred-model-b
        image: ghcr.io/pepijnk12/remla:inference-api-latest
        ports:
        - containerPort: 8001
---
apiVersion: v1
kind: Service
metadata:
  name: stackoverflow-tag-pred-svc
spec:
  selector:
    app: stackoverflow-tag-pred-model
  ports:
    - port: 8001
      targetPort: 8001
---
# =========== Service for our 'frontend' (actually a web deployment) ============= #
# I think if we are gonna use the example from the tutorial (sprint-boot). Our 'frontend' and 'redirecting' services should be combined in this service.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: stackoverflow-tag-pred-web-depl
  labels:
    app: stackoverflow-tag-pred-web
spec:
  replicas: 1 # could be more for stableness
  selector:
    matchLabels:
      app: stackoverflow-tag-pred-web
  template:
    metadata:
      labels:
        app: stackoverflow-tag-pred-web
    spec:
      containers:
      - name: stackoverflow-tag-pred-web    
        image: ghcr.io/pepijnk12/remla:redirecting-service-latest # Use our ghcr.io registry for the a built web image, now we dont have it yet
        ports:
        - containerPort: 8080
        env:
          # Used in the srpint-boot my-web example, we should put env variables by referring from configMaps here
          - name: MODEL_HOST
            valueFrom:
              configMapKeyRef:
                name: my-config
                key: model.host
---
apiVersion: v1
kind: Service
metadata:
  name: stackoverflow-tag-pred-web-svc
  labels:
    app: stackoverflow-tag-pred-web
spec:
  selector:
    app: stackoverflow-tag-pred-web
  ports:
    - port: 8080
      targetPort: 8080
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: mymonitor
  labels:
    # Use helm to install kube-prometheus-stack with name promstack (which contains grafana already)
    release: promstack # prometheus
spec: # sepcify which services to monitor
  selector:
    matchLabels:
      app: stackoverflow-tag-pred-web-svc
  endpoints:
  - targetPort: 8080
    path: "/metrics"
    interval: 1s
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-ingress
spec:
  defaultBackend:
    service:
      name: stackoverflow-tag-pred-web-svc
      port:
        number: 8080
---
# ============== ConfigMaps ============= #
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-config
data:
  # This has to be the same as the service name and the port
  model.host: "http://stackoverflow-tag-pred-model-svc:8080"
