# ML Project Report
**Project** | **Details**
--------|--------
Date    | Wed, 18 May 2022 12:29:19 +0200 
Path    | `/Users/pepijn/MasterTU/REMLA`
Config  | `.mllint.yml`
Default | No
Git: Remote URL | `git@github.com:Pepijnk12/REMLA.git`
Git: Commit     | `2397aeb832c6ce67e666f3bf6d9e95bf503b3bed`
Git: Branch     | `static-code-analysis`
Git: Dirty Workspace?  | Yes
Number of Python files | 6
Lines of Python code   | 185

---

## Config

**Note** — The following rules were disabled in `mllint`'s configuration:
- `dependency-management/use`
- `dependency-management/use-dev`

## Reports

### Version Control (`version-control`) — **28.6**%

Passed | Score | Weight | Rule | Slug
:-----:|------:|-------:|------|-----
✅ | 100.0% | 1 | Project uses Git | `version-control/code/git`
✅ | 100.0% | 1 | Project should not have any large files in its Git history | `version-control/code/git-no-big-files`
❌ | 0.0% | 1 | DVC: Project uses Data Version Control | `version-control/data/dvc`
❌ | 0.0% | 1 | DVC: Is installed | `version-control/data/dvc-is-installed`
❌ | 0.0% | 1 | DVC: Folder '.dvc' should be committed to Git | `version-control/data/commit-dvc-folder`
❌ | 0.0% | 1 | DVC: Should have at least one remote data storage configured | `version-control/data/dvc-has-remote`
❌ | 0.0% | 1 | DVC: Should be tracking at least one data file | `version-control/data/dvc-has-files`
 | _Total_ | | | 
❌ | **28.6**% | | Version Control | `version-control`

### Dependency Management (`dependency-management`) — **40.0**%

Passed | Score | Weight | Rule | Slug
:-----:|------:|-------:|------|-----
✅ | 100.0% | 1 | Project should only use one dependency manager | `dependency-management/single`
 | _Total_ | | | 
❌ | **40.0**% | | Dependency Management | `dependency-management`

### Code Quality (`code-quality`) — **12.0**%

Passed | Score | Weight | Rule | Slug
:-----:|------:|-------:|------|-----
❌ | 20.0% | 1 | Project should use code quality linters | `code-quality/use-linters`
❌ | 40.0% | 1 | All code quality linters should be installed in the current environment | `code-quality/linters-installed`
❌ | 0.0% | 1 | Pylint reports no issues with this project | `code-quality/pylint/no-issues`
❌ | 0.0% | 1 | Pylint is configured for this project | `code-quality/pylint/is-configured`
❌ | 0.0% | 1 | isort reports no issues with this project | `code-quality/isort/no-issues`
❌ | 0.0% | 0 | isort is properly configured | `code-quality/isort/is-configured`
 | _Total_ | | | 
❌ | **12.0**% | | Code Quality | `code-quality`

#### Details — Project should use code quality linters — ❌

Linters detected:

- Pylint


However, these linters were **missing** from your project:

- Mypy
- Black
- isort
- Bandit


We recommend that you start using these linters in your project to help you measure and maintain the quality of your code.

This rule will be satisfied, iff for each of these linters:
- **Either** there is a configuration file for this linter in the project
- **Or** the linter is a dependency of the project

Specifically, we recommend adding each linter to the development dependencies of your dependency manager,
e.g. using `poetry add --dev mypy` or `pipenv install --dev mypy`


#### Details — All code quality linters should be installed in the current environment — ❌

The following linters were not installed, so we could not analyse what they had to say about your project:

- Mypy
- Black
- Bandit


#### Details — Pylint reports no issues with this project — ❌

Pylint reported **73** issues with your project:

- `src/get_data.py:4,0` - _(C0304)_ Final newline missing
- `src/get_data.py:3,0` - _(C0301)_ Line too long (105/100)
- `src/text_classification.py:34,10` - _(C0209)_ Formatting a regular string which could be a f-string
- `src/text_classification.py:35,10` - _(C0209)_ Formatting a regular string which could be a f-string
- `src/text_classification.py:15,71` - _(W0613)_ Unused argument 'all_words'
- `src/text_classification.py:38,21` - _(C0103)_ Argument name "X_train" doesn't conform to snake_case naming style
- `src/text_classification.py:38,53` - _(C0103)_ Argument name "C" doesn't conform to snake_case naming style
- `src/text_classification.py:54,0` - _(C0116)_ Missing function or method docstring
- `src/text_classification.py:60,0` - _(C0116)_ Missing function or method docstring
- `src/text_classification.py:60,0` - _(R0914)_ Too many local variables (28/15)
- `src/text_classification.py:61,4` - _(C0103)_ Variable name "X_train_mybag" doesn't conform to snake_case naming style
- `src/text_classification.py:62,4` - _(C0103)_ Variable name "X_val_mybag" doesn't conform to snake_case naming style
- `src/text_classification.py:63,4` - _(C0103)_ Variable name "X_test_mybag" doesn't conform to snake_case naming style
- `src/text_classification.py:65,4` - _(C0103)_ Variable name "X_train_tfidf" doesn't conform to snake_case naming style
- `src/text_classification.py:66,4` - _(C0103)_ Variable name "X_val_tfidf" doesn't conform to snake_case naming style
- `src/text_classification.py:67,4` - _(C0103)_ Variable name "X_test_tfidf" doesn't conform to snake_case naming style
- `src/text_classification.py:73,4` - _(C0103)_ Variable name "WORDS_TO_INDEX" doesn't conform to snake_case naming style
- `src/text_classification.py:109,8` - _(C0209)_ Formatting a regular string which could be a f-string
- `src/text_classification.py:110,9` - _(W1514)_ Using open without explicitly specifying an encoding
- `src/text_classification.py:114,4` - _(C0103)_ Variable name "ALL_WORDS" doesn't conform to snake_case naming style
- `src/text_classification.py:63,4` - _(W0612)_ Unused variable 'X_test_mybag'
- `src/text_classification.py:86,4` - _(W0612)_ Unused variable 'y_val_predicted_scores_tfidf'
- `src/text_classification.py:88,4` - _(W0612)_ Unused variable 'y_val_pred_inversed'
- `src/text_classification.py:89,4` - _(W0612)_ Unused variable 'y_val_inversed'
- `src/text_preprocessing.py:40,0` - _(C0301)_ Line too long (105/100)
- `src/text_preprocessing.py:42,0` - _(C0301)_ Line too long (107/100)
- `src/text_preprocessing.py:70,0` - _(C0301)_ Line too long (104/100)
- `src/text_preprocessing.py:124,0` - _(C0301)_ Line too long (101/100)
- `src/text_preprocessing.py:13,0` - _(C0413)_ Import "from nltk.corpus import stopwords" should be placed at the top of the module
- `src/text_preprocessing.py:14,0` - _(C0413)_ Import "from ast import literal_eval" should be placed at the top of the module
- `src/text_preprocessing.py:15,0` - _(C0413)_ Import "from scipy import sparse as sp_sparse" should be placed at the top of the module
- `src/text_preprocessing.py:16,0` - _(C0413)_ Import "from sklearn.feature_extraction.text import TfidfVectorizer" should be placed at the top of the module
- `src/text_preprocessing.py:17,0` - _(C0413)_ Import "from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer" should be placed at the top of the module
- `src/text_preprocessing.py:18,0` - _(C0413)_ Import "from sklearn.preprocessing import FunctionTransformer" should be placed at the top of the module
- `src/text_preprocessing.py:19,0` - _(C0413)_ Import "from sklearn.pipeline import make_union, make_pipeline" should be placed at the top of the module
- `src/text_preprocessing.py:20,0` - _(C0413)_ Import "from joblib import dump, load" should be placed at the top of the module
- `src/text_preprocessing.py:27,0` - _(C0116)_ Missing function or method docstring
- `src/text_preprocessing.py:61,19` - _(C0103)_ Argument name "X_train" doesn't conform to snake_case naming style
- `src/text_preprocessing.py:61,28` - _(C0103)_ Argument name "X_val" doesn't conform to snake_case naming style
- `src/text_preprocessing.py:61,35` - _(C0103)_ Argument name "X_test" doesn't conform to snake_case naming style
- `src/text_preprocessing.py:79,0` - _(C0116)_ Missing function or method docstring
- `src/text_preprocessing.py:79,0` - _(R0914)_ Too many local variables (29/15)
- `src/text_preprocessing.py:84,4` - _(C0103)_ Variable name "X_train" doesn't conform to snake_case naming style
- `src/text_preprocessing.py:85,4` - _(C0103)_ Variable name "X_val" doesn't conform to snake_case naming style
- `src/text_preprocessing.py:86,4` - _(C0103)_ Variable name "X_test" doesn't conform to snake_case naming style
- `src/text_preprocessing.py:95,4` - _(C0103)_ Variable name "X_train" doesn't conform to snake_case naming style
- `src/text_preprocessing.py:96,4` - _(C0103)_ Variable name "X_val" doesn't conform to snake_case naming style
- `src/text_preprocessing.py:97,4` - _(C0103)_ Variable name "X_test" doesn't conform to snake_case naming style
- `src/text_preprocessing.py:118,4` - _(C0103)_ Variable name "DICT_SIZE" doesn't conform to snake_case naming style
- `src/text_preprocessing.py:119,4` - _(C0103)_ Variable name "INDEX_TO_WORDS" doesn't conform to snake_case naming style
- `src/text_preprocessing.py:120,4` - _(C0103)_ Variable name "WORDS_TO_INDEX" doesn't conform to snake_case naming style
- `src/text_preprocessing.py:121,4` - _(C0103)_ Variable name "ALL_WORDS" doesn't conform to snake_case naming style
- `src/text_preprocessing.py:123,4` - _(C0103)_ Variable name "X_train_mybag" doesn't conform to snake_case naming style
- `src/text_preprocessing.py:125,4` - _(C0103)_ Variable name "X_val_mybag" doesn't conform to snake_case naming style
- `src/text_preprocessing.py:127,4` - _(C0103)_ Variable name "X_test_mybag" doesn't conform to snake_case naming style
- `src/text_preprocessing.py:130,4` - _(C0103)_ Variable name "X_train_tfidf" doesn't conform to snake_case naming style
- `src/text_preprocessing.py:130,19` - _(C0103)_ Variable name "X_val_tfidf" doesn't conform to snake_case naming style
- `src/text_preprocessing.py:130,32` - _(C0103)_ Variable name "X_test_tfidf" doesn't conform to snake_case naming style
- `src/text_preprocessing.py:93,4` - _(W0612)_ Unused variable 'text_prepare_results'
- `src/text_preprocessing.py:121,4` - _(W0612)_ Unused variable 'ALL_WORDS'
- `src/text_preprocessing.py:17,0` - _(W0611)_ Unused CountVectorizer imported from sklearn.feature_extraction.text
- `src/text_preprocessing.py:17,0` - _(W0611)_ Unused TfidfTransformer imported from sklearn.feature_extraction.text
- `src/text_preprocessing.py:18,0` - _(W0611)_ Unused FunctionTransformer imported from sklearn.preprocessing
- `src/text_preprocessing.py:19,0` - _(W0611)_ Unused make_union imported from sklearn.pipeline
- `src/text_preprocessing.py:19,0` - _(W0611)_ Unused make_pipeline imported from sklearn.pipeline
- `src/text_preprocessing.py:20,0` - _(W0611)_ Unused load imported from joblib
- `src/text_preprocessing.py:9,0` - _(C0411)_ standard import "import re" should be placed before "import pandas as pd"
- `src/text_preprocessing.py:14,0` - _(C0411)_ standard import "from ast import literal_eval" should be placed before "import pandas as pd"
- `tests/test_text_preprocessing.py:12,0` - _(C0301)_ Line too long (110/100)
- `tests/test_text_preprocessing.py:16,0` - _(C0301)_ Line too long (112/100)
- `tests/test_text_preprocessing.py:1,0` - _(C0114)_ Missing module docstring
- `tests/test_text_preprocessing.py:11,0` - _(C0116)_ Missing function or method docstring
- `tests/test_text_preprocessing.py:19,0` - _(C0116)_ Missing function or method docstring


#### Details — isort reports no issues with this project — ❌

isort reported **3** files in your project that it would fix:

- `tests/test_text_preprocessing.py` - Imports are incorrectly sorted and/or formatted.
- `src/text_preprocessing.py` - Imports are incorrectly sorted and/or formatted.
- `src/text_classification.py` - Imports are incorrectly sorted and/or formatted.

isort can fix these issues automatically when you run `isort .` in your project.

#### Details — isort is properly configured — ❌

isort is not properly configured.
In order to be compatible with [Black](https://github.com/psf/black), which mllint also recommends using,
you should configure `isort` to use the `black` profile.
Furthermore, we recommend centralising your configuration in your `pyproject.toml`

Thus, ensure that your `pyproject.toml` contains at least the following section:

```toml
[tool.isort]
profile = "black"
```


### Testing (`testing`) — **45.8**%

Passed | Score | Weight | Rule | Slug
:-----:|------:|-------:|------|-----
❌ | 83.3% | 1 | Project has automated tests | `testing/has-tests`
❌ | 0.0% | 1 | Project passes all of its automated tests | `testing/pass`
❌ | 0.0% | 1 | Project provides a test coverage report | `testing/coverage`
✅ | 100.0% | 1 | Tests should be placed in the tests folder | `testing/tests-folder`
 | _Total_ | | | 
❌ | **45.8**% | | Testing | `testing`

#### Details — Project has automated tests — ❌

There is **1** test file in your project, which meets the minimum of **1** test file required.

However, this only equates to **16.666667%** of Python files in your project being tests, while `mllint` expects that **20%** of your project's Python files are tests.

#### Details — Project passes all of its automated tests — ❌

No test report was provided.

Please update the `testing.report` setting in your project's `mllint` configuration to specify the path to your project's test report.

When using `pytest` to run your project's tests, use the `--junitxml=<filename>` option to generate such a test report, e.g.:
```sh
pytest --junitxml=tests-report.xml
```


#### Details — Project provides a test coverage report — ❌

No test coverage report was provided.

Please update the `testing.coverage.report` setting in your project's `mllint` configuration to specify the path to your project's test coverage report.

Generating a test coverage report with `pytest` can be done by adding and installing `pytest-cov` as a development dependency of your project. Then use the following command to run your tests and generate both a test report as well as a coverage report:
```sh
pytest --junitxml=tests-report.xml --cov=path_to_package_under_test --cov-report=xml
```


### Continuous Integration (`ci`) — **100.0**%

Passed | Score | Weight | Rule | Slug
:-----:|------:|-------:|------|-----
✅ | 100.0% | 1 | Project uses Continuous Integration (CI) | `ci/use`
 | _Total_ | | | 
✅ | **100.0**% | | Continuous Integration | `ci`

